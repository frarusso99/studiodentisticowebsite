import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Stethoscope, Smile, Heart, Shield, Wrench, Brain, Eye, Activity } from 'lucide-react';

const services = [
  {
    icon: <Stethoscope className="w-12 h-12 text-[#4A828F]" />,
    title: 'Odontoiatria Conservativa',
    description: "Trattamenti personalizzati per preservare la salute dei tuoi denti con tecniche all'avanguardia."
  },
  {
    icon: <Smile className="w-12 h-12 text-[#4A828F]" />,
    title: 'Implantologia Guidata',
    description: 'Tecnologia 3D avanzata per risultati precisi e duraturi, con tempi di recupero ridotti.'
  },
  {
    icon: <Heart className="w-12 h-12 text-[#4A828F]" />,
    title: 'Ortodonzia Invisibile',
    description: 'Allineatori trasparenti su misura per un sorriso perfetto, confortevoli e discreti.'
  },
  {
    icon: <Shield className="w-12 h-12 text-[#4A828F]" />,
    title: 'Igiene e Prevenzione',
    description: 'Programmi personalizzati di prevenzione per mantenere il tuo sorriso sano nel tempo.'
  },
  {
    icon: <Wrench className="w-12 h-12 text-[#4A828F]" />,
    title: 'Chirurgia Orale',
    description: 'Interventi specialistici con tecniche mini-invasive per un recupero rapido.'
  },
  {
    icon: <Brain className="w-12 h-12 text-[#4A828F]" />,
    title: 'Gnatologia',
    description: "Trattamento dei disturbi dell'articolazione temporo-mandibolare e del bruxismo."
  },
  {
    icon: <Eye className="w-12 h-12 text-[#4A828F]" />,
    title: 'Estetica Dentale',
    description: 'Sbiancamento professionale e faccette in ceramica per un sorriso luminoso.'
  },
  {
    icon: <Activity className="w-12 h-12 text-[#4A828F]" />,
    title: 'Endodonzia',
    description: 'Trattamenti canalari di precisione con microscopia operatoria.'
  }
];

export default function Services() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [direction, setDirection] = useState(0);

  const slideVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 1000 : -1000,
      opacity: 0
    }),
    center: {
      zIndex: 1,
      x: 0,
      opacity: 1
    },
    exit: (direction: number) => ({
      zIndex: 0,
      x: direction < 0 ? 1000 : -1000,
      opacity: 0
    })
  };

  const swipeConfidenceThreshold = 10000;
  const swipePower = (offset: number, velocity: number) => {
    return Math.abs(offset) * velocity;
  };

  const paginate = (newDirection: number) => {
    setDirection(newDirection);
    setCurrentIndex((prevIndex) => (prevIndex + newDirection + services.length) % services.length);
  };

  useEffect(() => {
    const timer = setInterval(() => {
      paginate(1);
    }, 5000);
    return () => clearInterval(timer);
  }, []);

  return (
    <section className="py-24 bg-gradient-to-b from-white to-[#AFCDD5]/10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-[#2E545D] mb-4">I Nostri Servizi Specializzati</h2>
          <p className="text-xl text-[#4A828F]">Esperienza e innovazione al servizio del tuo sorriso</p>
        </div>

        <div className="relative h-[400px] overflow-hidden">
          <AnimatePresence initial={false} custom={direction}>
            <motion.div
              key={currentIndex}
              custom={direction}
              variants={slideVariants}
              initial="enter"
              animate="center"
              exit="exit"
              transition={{
                x: { type: "spring", stiffness: 300, damping: 30 },
                opacity: { duration: 0.2 }
              }}
              drag="x"
              dragConstraints={{ left: 0, right: 0 }}
              dragElastic={1}
              onDragEnd={(_e, { offset, velocity }) => {
                const swipe = swipePower(offset.x, velocity.x);
                if (swipe < -swipeConfidenceThreshold) {
                  paginate(1);
                } else if (swipe > swipeConfidenceThreshold) {
                  paginate(-1);
                }
              }}
              className="absolute w-full"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 px-4">
                {[services[currentIndex], services[(currentIndex + 1) % services.length]].map((service, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.2 }}
                    className="p-8 bg-white rounded-2xl shadow-[0_8px_30px_rgba(74,130,143,0.1)] hover:shadow-[0_8px_30px_rgba(74,130,143,0.2)] transition-all duration-300"
                  >
                    <div className="mb-6 p-4 bg-[#AFCDD5]/10 rounded-xl inline-block">
                      {service.icon}
                    </div>
                    <h3 className="text-2xl font-semibold text-[#233539] mb-4">{service.title}</h3>
                    <p className="text-[#4A828F] text-lg">{service.description}</p>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </AnimatePresence>

          {/* Navigation Buttons */}
          <button
            className="absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-white shadow-lg flex items-center justify-center text-[#4A828F] hover:bg-[#4A828F] hover:text-white transition-all"
            onClick={() => paginate(-1)}
          >
            ←
          </button>
          <button
            className="absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-white shadow-lg flex items-center justify-center text-[#4A828F] hover:bg-[#4A828F] hover:text-white transition-all"
            onClick={() => paginate(1)}
          >
            →
          </button>

          {/* Indicators */}
          <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
            {services.map((_, index) => (
              <button
                key={index}
                onClick={() => {
                  setDirection(index > currentIndex ? 1 : -1);
                  setCurrentIndex(index);
                }}
                className={`w-2 h-2 rounded-full transition-all ${
                  index === currentIndex ? 'w-8 bg-[#4A828F]' : 'bg-[#AFCDD5]'
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}